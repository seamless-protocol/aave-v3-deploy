{
  "address": "0x3A4c3bAFE174e691CD2cB945c48441D3B1898005",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "incentivesController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardsAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardsVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIncentivesController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "performTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1acb939021e0ba74cf888bb57c24b953cc2c6e92c0dfe3f347068744e3f2551",
  "receipt": {
    "to": null,
    "from": "0x1099a1b84678493Bc6c6F737aa3FFe5bcf488Bf9",
    "contractAddress": "0x3A4c3bAFE174e691CD2cB945c48441D3B1898005",
    "transactionIndex": 2,
    "gasUsed": "416430",
    "logsBloom": "0x
    "blockHash": "0x066807ea963466b92d3fffc1cf09e6250c6311a0ab9311136d1c7f69ca3ac7b0",
    "transactionHash": "0xe1acb939021e0ba74cf888bb57c24b953cc2c6e92c0dfe3f347068744e3f2551",
    "logs": [],
    "blockNumber": 8908506,
    "cumulativeGasUsed": "5879293",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc40A8549024C689FeFEE25842a674F851D91397c",
    "0x1099a1b84678493Bc6c6F737aa3FFe5bcf488Bf9",
    "0x1099a1b84678493Bc6c6F737aa3FFe5bcf488Bf9"
  ],
  "numDeployments": 1,
  "solcInputHash": "afa3e5e8b3854b65627db3eff7ad76b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentivesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"performTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave*\",\"kind\":\"dev\",\"methods\":{\"emergencyWithdrawal(address,address,uint256)\":{\"details\":\"Perform an emergency token withdrawal only callable by the Rewards admin\",\"params\":{\"amount\":\"Amount of the withdrawal\",\"to\":\"Address of the recipient of the withdrawal\",\"token\":\"Address of the token to withdraw funds from this contract\"}},\"getIncentivesController()\":{\"returns\":{\"_0\":\"Returns the address of the Incentives Controller\"}},\"getRewardsAdmin()\":{\"returns\":{\"_0\":\"Returns the address of the Rewards admin\"}},\"getRewardsVault()\":{\"returns\":{\"_0\":\"Address of the rewards vault\"}},\"performTransfer(address,address,uint256)\":{\"details\":\"Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\",\"params\":{\"amount\":\"Amount to transfer to the \\\"to\\\" address parameter\",\"reward\":\"Address of the reward token\",\"to\":\"Account to transfer rewards\"},\"returns\":{\"_0\":\"Returns true bool if transfer logic succeeds\"}}},\"title\":\"PullRewardsTransferStrategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Transfer strategy that pulls ERC20 rewards from an external account to the user address. The external account could be a smart contract or EOA that must approve to the PullRewardsTransferStrategy contract address.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/periphery-v3/contracts/rewards/transfer-strategies/PullRewardsTransferStrategy.sol\":\"PullRewardsTransferStrategy\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/dependencies/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from '../../openzeppelin/contracts/IERC20.sol';\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n  /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n  /// also when the token returns `false`.\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    bytes4 selector_ = token.transfer.selector;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let freeMemoryPointer := mload(0x40)\\n      mstore(freeMemoryPointer, selector_)\\n      mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n      mstore(add(freeMemoryPointer, 36), value)\\n\\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    require(getLastTransferResult(token), 'GPv2: failed transfer');\\n  }\\n\\n  /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n  /// reverts also when the token returns `false`.\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    bytes4 selector_ = token.transferFrom.selector;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let freeMemoryPointer := mload(0x40)\\n      mstore(freeMemoryPointer, selector_)\\n      mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\n      mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n      mstore(add(freeMemoryPointer, 68), value)\\n\\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n        returndatacopy(0, 0, returndatasize())\\n        revert(0, returndatasize())\\n      }\\n    }\\n\\n    require(getLastTransferResult(token), 'GPv2: failed transferFrom');\\n  }\\n\\n  /// @dev Verifies that the last return was a successful `transfer*` call.\\n  /// This is done by checking that the return data is either empty, or\\n  /// is a valid ABI encoded boolean.\\n  function getLastTransferResult(IERC20 token) private view returns (bool success) {\\n    // NOTE: Inspecting previous return data requires assembly. Note that\\n    // we write the return data to memory 0 in the case where the return\\n    // data size is 32, this is OK since the first 64 bytes of memory are\\n    // reserved by Solidy as a scratch space that can be used within\\n    // assembly blocks.\\n    // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      /// @dev Revert with an ABI encoded Solidity error with a message\\n      /// that fits into 32-bytes.\\n      ///\\n      /// An ABI encoded Solidity error has the following memory layout:\\n      ///\\n      /// ------------+----------------------------------\\n      ///  byte range | value\\n      /// ------------+----------------------------------\\n      ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n      ///  0x04..0x24 |      string offset (always 0x20)\\n      ///  0x24..0x44 |                    string length\\n      ///  0x44..0x64 | string value, padded to 32-bytes\\n      function revertWithMessage(length, message) {\\n        mstore(0x00, '\\\\x08\\\\xc3\\\\x79\\\\xa0')\\n        mstore(0x04, 0x20)\\n        mstore(0x24, length)\\n        mstore(0x44, message)\\n        revert(0x00, 0x64)\\n      }\\n\\n      switch returndatasize()\\n      // Non-standard ERC20 transfer without return.\\n      case 0 {\\n        // NOTE: When the return data size is 0, verify that there\\n        // is code at the address. This is done in order to maintain\\n        // compatibility with Solidity calling conventions.\\n        // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n        if iszero(extcodesize(token)) {\\n          revertWithMessage(20, 'GPv2: not a contract')\\n        }\\n\\n        success := 1\\n      }\\n      // Standard ERC20 transfer returning boolean success value.\\n      case 32 {\\n        returndatacopy(0, 0, returndatasize())\\n\\n        // NOTE: For ABI encoding v1, any non-zero value is accepted\\n        // as `true` for a boolean. In order to stay compatible with\\n        // OpenZeppelin's `SafeERC20` library which is known to work\\n        // with the existing ERC20 implementation we care about,\\n        // make sure we return success for any non-zero return value\\n        // from the `transfer*` call.\\n        success := iszero(iszero(mload(0)))\\n      }\\n      default {\\n        revertWithMessage(31, 'GPv2: malformed transfer result')\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb2f76a16e2913aa27678059f5763bf7d443fb94cbc617969f21fee601fc2761c\",\"license\":\"LGPL-3.0-or-later\"},\"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf57d62241e553696a1324d225663ba2e1a51db0a51ca236d0c1b009d89b6284c\",\"license\":\"AGPL-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/IPullRewardsTransferStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {ITransferStrategyBase} from './ITransferStrategyBase.sol';\\n\\n/**\\n * @title IPullRewardsTransferStrategy\\n * @author Aave\\n **/\\ninterface IPullRewardsTransferStrategy is ITransferStrategyBase {\\n  /**\\n   * @return Address of the rewards vault\\n   */\\n  function getRewardsVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x072fd713c1c4e5d652ec40131beab6438b63817a1657cdd51e0c2cbc9d17b8d0\",\"license\":\"AGPL-3.0\"},\"@aave/periphery-v3/contracts/rewards/interfaces/ITransferStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\ninterface ITransferStrategyBase {\\n  event EmergencyWithdrawal(\\n    address indexed caller,\\n    address indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\\n   * @param to Account to transfer rewards\\n   * @param reward Address of the reward token\\n   * @param amount Amount to transfer to the \\\"to\\\" address parameter\\n   * @return Returns true bool if transfer logic succeeds\\n   */\\n  function performTransfer(\\n    address to,\\n    address reward,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @return Returns the address of the Incentives Controller\\n   */\\n  function getIncentivesController() external view returns (address);\\n\\n  /**\\n   * @return Returns the address of the Rewards admin\\n   */\\n  function getRewardsAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Perform an emergency token withdrawal only callable by the Rewards admin\\n   * @param token Address of the token to withdraw funds from this contract\\n   * @param to Address of the recipient of the withdrawal\\n   * @param amount Amount of the withdrawal\\n   */\\n  function emergencyWithdrawal(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x9b3726be4350d926d094bdfe0510b468190383c91da4b5531059c6fe31b92221\",\"license\":\"AGPL-3.0\"},\"@aave/periphery-v3/contracts/rewards/transfer-strategies/PullRewardsTransferStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IPullRewardsTransferStrategy} from '../interfaces/IPullRewardsTransferStrategy.sol';\\nimport {ITransferStrategyBase} from '../interfaces/ITransferStrategyBase.sol';\\nimport {TransferStrategyBase} from './TransferStrategyBase.sol';\\nimport {GPv2SafeERC20} from '@aave/core-v3/contracts/dependencies/gnosis/contracts/GPv2SafeERC20.sol';\\nimport {IERC20} from '@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\n\\n/**\\n * @title PullRewardsTransferStrategy\\n * @notice Transfer strategy that pulls ERC20 rewards from an external account to the user address.\\n * The external account could be a smart contract or EOA that must approve to the PullRewardsTransferStrategy contract address.\\n * @author Aave\\n **/\\ncontract PullRewardsTransferStrategy is TransferStrategyBase, IPullRewardsTransferStrategy {\\n  using GPv2SafeERC20 for IERC20;\\n\\n  address internal immutable REWARDS_VAULT;\\n\\n  constructor(\\n    address incentivesController,\\n    address rewardsAdmin,\\n    address rewardsVault\\n  ) TransferStrategyBase(incentivesController, rewardsAdmin) {\\n    REWARDS_VAULT = rewardsVault;\\n  }\\n\\n  /// @inheritdoc TransferStrategyBase\\n  function performTransfer(\\n    address to,\\n    address reward,\\n    uint256 amount\\n  )\\n    external\\n    override(TransferStrategyBase, ITransferStrategyBase)\\n    onlyIncentivesController\\n    returns (bool)\\n  {\\n    IERC20(reward).safeTransferFrom(REWARDS_VAULT, to, amount);\\n\\n    return true;\\n  }\\n\\n  /// @inheritdoc IPullRewardsTransferStrategy\\n  function getRewardsVault() external view returns (address) {\\n    return REWARDS_VAULT;\\n  }\\n}\\n\",\"keccak256\":\"0xd8d537bd930f9a0b80307de6a44eb4967ed3f324b8db321a3754f824ad26438f\",\"license\":\"AGPL-3.0\"},\"@aave/periphery-v3/contracts/rewards/transfer-strategies/TransferStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {ITransferStrategyBase} from '../interfaces/ITransferStrategyBase.sol';\\nimport {GPv2SafeERC20} from '@aave/core-v3/contracts/dependencies/gnosis/contracts/GPv2SafeERC20.sol';\\nimport {IERC20} from '@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\n\\n/**\\n * @title TransferStrategyStorage\\n * @author Aave\\n **/\\nabstract contract TransferStrategyBase is ITransferStrategyBase {\\n  using GPv2SafeERC20 for IERC20;\\n\\n  address internal immutable INCENTIVES_CONTROLLER;\\n  address internal immutable REWARDS_ADMIN;\\n\\n  constructor(address incentivesController, address rewardsAdmin) {\\n    INCENTIVES_CONTROLLER = incentivesController;\\n    REWARDS_ADMIN = rewardsAdmin;\\n  }\\n\\n  /**\\n   * @dev Modifier for incentives controller only functions\\n   */\\n  modifier onlyIncentivesController() {\\n    require(INCENTIVES_CONTROLLER == msg.sender, 'CALLER_NOT_INCENTIVES_CONTROLLER');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier for reward admin only functions\\n   */\\n  modifier onlyRewardsAdmin() {\\n    require(msg.sender == REWARDS_ADMIN, 'ONLY_REWARDS_ADMIN');\\n    _;\\n  }\\n\\n  /// @inheritdoc ITransferStrategyBase\\n  function getIncentivesController() external view override returns (address) {\\n    return INCENTIVES_CONTROLLER;\\n  }\\n\\n  /// @inheritdoc ITransferStrategyBase\\n  function getRewardsAdmin() external view override returns (address) {\\n    return REWARDS_ADMIN;\\n  }\\n\\n  /// @inheritdoc ITransferStrategyBase\\n  function performTransfer(\\n    address to,\\n    address reward,\\n    uint256 amount\\n  ) external virtual returns (bool);\\n\\n  /// @inheritdoc ITransferStrategyBase\\n  function emergencyWithdrawal(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external onlyRewardsAdmin {\\n    IERC20(token).safeTransfer(to, amount);\\n\\n    emit EmergencyWithdrawal(msg.sender, token, to, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xd412ed205d7d5c9d9f2172cc537ad0e86ec7aee7f9bc658a4001a3be4b85ba5e\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161078038038061078083398101604081905261002f91610068565b6001600160a01b0392831660805290821660a0521660c0526100ab565b80516001600160a01b038116811461006357600080fd5b919050565b60008060006060848603121561007d57600080fd5b6100868461004c565b92506100946020850161004c565b91506100a26040850161004c565b90509250925092565b60805160a05160c0516106936100ed6000396000818161011801526101fe01526000818160f201526102460152600081816096015261014001526106936000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638d8e5da7116100505780638d8e5da7146100db578063c6255443146100f0578063e23ddec51461011657600080fd5b806316beb9821461006c57806375d2641314610094575b600080fd5b61007f61007a366004610621565b61013c565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b6100ee6100e9366004610621565b61022e565b005b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146101e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43414c4c45525f4e4f545f494e43454e54495645535f434f4e54524f4c4c455260448201526064015b60405180910390fd5b61022473ffffffffffffffffffffffffffffffffffffffff84167f00000000000000000000000000000000000000000000000000000000000000008685610371565b5060019392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4f4e4c595f524557415244535f41444d494e000000000000000000000000000060448201526064016101d9565b6102ee73ffffffffffffffffffffffffffffffffffffffff84168383610453565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7dc4ea712e6400e67a5abca1a983e5c420c386c19936dc120cd860b50b8e25798460405161036491815260200190565b60405180910390a4505050565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8581166004840152841660248301526044820183905290600080606483828a5af16103dc573d6000803e3d6000fd5b506103e68561052c565b61044c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d0000000000000060448201526064016101d9565b5050505050565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff84166004830152602482018390529060008060448382895af16104b6573d6000803e3d6000fd5b506104c08461052c565b610526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f475076323a206661696c6564207472616e73666572000000000000000000000060448201526064016101d9565b50505050565b600061056c565b7f08c379a00000000000000000000000000000000000000000000000000000000060005260206004528060245250806044525060646000fd5b3d80156105ab57602081146105e5576105a67f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f610533565b6105f2565b823b6105dc576105dc7f475076323a206e6f74206120636f6e74726163740000000000000000000000006014610533565b600191506105f2565b3d6000803e600051151591505b50919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461061c57600080fd5b919050565b60008060006060848603121561063657600080fd5b61063f846105f8565b925061064d602085016105f8565b915060408401359050925092509256fea264697066735822122054821dd60062abe50e4fef682a270efb3c6b9223a792ca8e14eb5296a20d449164736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80638d8e5da7116100505780638d8e5da7146100db578063c6255443146100f0578063e23ddec51461011657600080fd5b806316beb9821461006c57806375d2641314610094575b600080fd5b61007f61007a366004610621565b61013c565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008b565b6100ee6100e9366004610621565b61022e565b005b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b7f00000000000000000000000000000000000000000000000000000000000000006100b6565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146101e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43414c4c45525f4e4f545f494e43454e54495645535f434f4e54524f4c4c455260448201526064015b60405180910390fd5b61022473ffffffffffffffffffffffffffffffffffffffff84167f00000000000000000000000000000000000000000000000000000000000000008685610371565b5060019392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4f4e4c595f524557415244535f41444d494e000000000000000000000000000060448201526064016101d9565b6102ee73ffffffffffffffffffffffffffffffffffffffff84168383610453565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7dc4ea712e6400e67a5abca1a983e5c420c386c19936dc120cd860b50b8e25798460405161036491815260200190565b60405180910390a4505050565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8581166004840152841660248301526044820183905290600080606483828a5af16103dc573d6000803e3d6000fd5b506103e68561052c565b61044c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d0000000000000060448201526064016101d9565b5050505050565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff84166004830152602482018390529060008060448382895af16104b6573d6000803e3d6000fd5b506104c08461052c565b610526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f475076323a206661696c6564207472616e73666572000000000000000000000060448201526064016101d9565b50505050565b600061056c565b7f08c379a00000000000000000000000000000000000000000000000000000000060005260206004528060245250806044525060646000fd5b3d80156105ab57602081146105e5576105a67f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f610533565b6105f2565b823b6105dc576105dc7f475076323a206e6f74206120636f6e74726163740000000000000000000000006014610533565b600191506105f2565b3d6000803e600051151591505b50919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461061c57600080fd5b919050565b60008060006060848603121561063657600080fd5b61063f846105f8565b925061064d602085016105f8565b915060408401359050925092509256fea264697066735822122054821dd60062abe50e4fef682a270efb3c6b9223a792ca8e14eb5296a20d449164736f6c634300080a0033",
  "devdoc": {
    "author": "Aave*",
    "kind": "dev",
    "methods": {
      "emergencyWithdrawal(address,address,uint256)": {
        "details": "Perform an emergency token withdrawal only callable by the Rewards admin",
        "params": {
          "amount": "Amount of the withdrawal",
          "to": "Address of the recipient of the withdrawal",
          "token": "Address of the token to withdraw funds from this contract"
        }
      },
      "getIncentivesController()": {
        "returns": {
          "_0": "Returns the address of the Incentives Controller"
        }
      },
      "getRewardsAdmin()": {
        "returns": {
          "_0": "Returns the address of the Rewards admin"
        }
      },
      "getRewardsVault()": {
        "returns": {
          "_0": "Address of the rewards vault"
        }
      },
      "performTransfer(address,address,uint256)": {
        "details": "Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation",
        "params": {
          "amount": "Amount to transfer to the \"to\" address parameter",
          "reward": "Address of the reward token",
          "to": "Account to transfer rewards"
        },
        "returns": {
          "_0": "Returns true bool if transfer logic succeeds"
        }
      }
    },
    "title": "PullRewardsTransferStrategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Transfer strategy that pulls ERC20 rewards from an external account to the user address. The external account could be a smart contract or EOA that must approve to the PullRewardsTransferStrategy contract address.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}